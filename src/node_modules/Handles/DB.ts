import * as low from 'lowdb'
import * as FileSync from 'lowdb/adapters/FileSync'
import { GuildMember } from 'discord.js'

export default class GlobalDB {
    private dbPath: string = './'
    private adapter: FileSync
    private db: low

    /**
     * Hydrate the class with the database
     * @param {string} dbPath Path of database json file
     */
    constructor(dbPath: string) {
        this.dbPath += dbPath

        this.adapter = new FileSync(this.dbPath, { defaultValue: {} })
        this.db = low(this.adapter)

        this.db.defaults(
            {
                servers: [],
                globalStats: {
                    cmdExed: 0,
                    msgSent: 0
                }
            }).write()
    }

    getGlobalStats() {
        return this.db.get('globalStats')
    }

    /**
     * Get all data of a server
     * @param serverid ID of the server
     */
    getServer(serverid) {
        let server = this.db.get('servers').find({ id: serverid })
        if (!server.value()) {
            this.addServer(serverid)
            return this.getServer(serverid)
        } else return server
    }

    /**
     * Get all users of a server
     * @param serverid ID of the server
     */
    getUsers(serverid: string) {
        return this.getServer(serverid).get('users')
    }

    /**
     * Get advanced config of a server
     * @param serverid ID of the server
     */
    getConfig(serverid: string) {
        return this.getServer(serverid).get('config')
    }

    /**
     * Get stats of a server
     * @param serverid ID of the server
     */
    getStats(serverid: string) {
        return this.getServer(serverid).get('stats')
    }

    /**
     * Get data of a specific user
     * @param serverid ID of the server
     * @param userid ID of the user
     */
    getUser(serverid: string, userid: string) {
        let user = this.getUsers(serverid).find({ id: userid })
        if (!user.value()) {
            this.addUser(serverid, userid)
            return this.getUser(serverid, userid)
        } else return user

    }

    /**
     * Add a server in the database
     * @param serverid ID of the server
     */
    addServer(serverid: string) {
        this.db.get('servers').push(
            {
                id: serverid,
                users: [],
                config: {
                    lang: app.config.lang,
                    joinmsg: {
                        enabled: false,
                        title: undefined,
                        body: undefined
                    }
                },
                stats: { cmdExed: 0, msgSent: 0 },
                roles: []
            }).write()
    }

    /**
     * Add a user in the database
     * @param serverid ID of the server
     * @param userid ID of the user
     */
    addUser(serverid: string, userid: string) {
        this.getUsers(serverid).push(
            {
                id: userid,
                xp: 0,
                balance: 0,
                profile: {
                    birthdate: 0
                },
                stats: {
                    cmdExed: 0,
                    msgSent: 0
                },
                timestamps: {}
            }
        ).write()
    }
}
