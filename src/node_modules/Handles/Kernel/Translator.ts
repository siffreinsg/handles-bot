import * as path from 'path'
import * as Recursive from '../Utils/Recursive'
import { replaceAll } from 'Handles/Utils/Misc'

export default class Translator {
    langsPath: string = '../../../app/langs/'
    langs: any = {}
    defaultLang: string

    /**
     * Initialize translations
     * @param defaultLang The default lang to use
     */
    constructor(defaultLang: string) {
        this.defaultLang = defaultLang
        this.langsPath = path.resolve(__dirname, this.langsPath)

        try {
            let file = path.resolve(this.langsPath, defaultLang + '.json')
            this.langs[defaultLang] = require(file)
        } catch (ex) {
            throw new Error('Unreachable language file (' + defaultLang + ')')
        }

        Recursive.loopFolders(path.resolve(this.langsPath, this.langsPath), (dir, langFile) => {
            let fullFile = path.join(dir, langFile)
            this.langs[langFile.split('.')[0]] = require(fullFile)
        })
    }

    getServerLang(serverid: string) {
        let lang = app.db.getConfig(serverid).get('lang').value()
        return (lang ? lang : this.defaultLang)
    }

    translate(path: string, lang: string = this.defaultLang, tags: { [key: string]: string } = {}): string {
        if (!lang || lang === 'default') lang = this.defaultLang

        try {
            let result = this.langs[lang], go = path.split('/')
            go.shift()

            go.forEach(function (value) {
                result = result[value]
            })
            for (var key in tags) {
                key = key.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') // Regex escape
                result = result.replace(new RegExp('{' + key + '}', 'g'), tags[key])
            }

            let search = ['{prefix}', '{botname}', '{version}', '{lang}', '{invite_url}'],
                replacement = [app.config.prefix, app.config.botname, app.config.version, this.defaultLang, app.invite_url]
            return replaceAll(result, search, replacement)

        } catch (ex) {
            throw new Error('Unable to access translation! Lang: ' + lang + ', Path: ' + path)
        }
    }
}
