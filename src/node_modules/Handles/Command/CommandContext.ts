import * as Discord from 'discord.js'

export default class CommandContext {
    server: Discord.Guild
    message: Discord.Message
    channel: Discord.TextChannel | Discord.DMChannel | Discord.GroupDMChannel
    reactions: Discord.Collection<string, Discord.MessageReaction>
    executor: Discord.User

    /**
     * Constructor of the CommandContext class.
     *
     * @classdesc The command context
     */
    constructor(message: Discord.Message) {
        this.server = message.guild
        this.channel = message.channel
        this.message = message
        this.reactions = message.reactions
        this.executor = message.author
    }

    translate(path: string, tags: { [key: string]: string } = {}) {
        let lang = app.translator.defaultLang
        if (this.server && this.server.id) lang = app.translator.getServerLang(this.server.id)
        return app.translator.translate(path, lang, tags)
    }

    getUserColor(userid: string = this.executor.id) {
        let color
        if (this.channel.type === 'text') color = this.server.member(userid).displayHexColor
        else color = '#' + Math.random().toString(16).substr(-6)
        return color
    }

    reply(content?: any, options?: Discord.MessageOptions | Discord.RichEmbed | Discord.Attachment) {
        if (this.channel.type === 'text')
            return this.channel.send(content, options)
        else
            return this.executor.send(content, options)
    }

    delete(wait: number = 0) {
        if (this.channel.type === 'text') return this.message.delete(wait)
    }

    replyError(type: string = '', title: string = '', desc: string = '') {
        switch (type) {
            case 'badArgs':
                title = '/errors/badArgs'
                desc = '/errors/learnCMD'
                break
            case 'custom':
                break
            case 'notAdmin':
                title = '/errors/adminOnly'
                desc = '/errors/needAdmin'
                break
            default:
                title = '/errors/unknownErr'
                desc = '/errors/basicError'
                break
        }

        let embed = new Discord.RichEmbed()
            .setColor('#cc0000')
            .setFooter(this.translate('/misc/requestedBy', { user: this.executor.tag }), this.executor.displayAvatarURL)
        if (type === 'custom') embed.addField(title, desc)
        else embed.addField(this.translate(title), this.translate(desc))

        this.reply('', embed)
    }

    processing() {
        return new Promise((resolve, reject) => {
            this.reply(this.translate('/misc/processing')).then(msg => resolve(msg)).catch(err => reject(err))
        })
    }

    isAdmin() {
        if (this.channel.type !== 'text') {
            return 'ERR_NO_GUILD'
        }
        let member = this.server.member(this.executor)

        if (member.hasPermission('MANAGE_ROLES', true, true) || app.config.superadmins.indexOf(member.id) !== -1) return true
        else return false
    }
}
